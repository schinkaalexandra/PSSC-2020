/*
Deployment script for Backend.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Backend.Database"
:setvar DefaultFilePrefix "Backend.Database"
:setvar DefaultDataPath "C:\Users\schin\AppData\Local\Microsoft\VisualStudio\SSDT\Backend.Database"
:setvar DefaultLogPath "C:\Users\schin\AppData\Local\Microsoft\VisualStudio\SSDT\Backend.Database"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Rename refactoring operation with key 2776d1af-5766-4d65-9413-0de191ac44f5 is skipped, element [base].[Badge].[UX_Badge_Name] (SqlIndex) will not be renamed to [UX_base_Badge_Name]';


GO
PRINT N'Rename refactoring operation with key 1996913e-0ec4-4559-822a-397725e0e205 is skipped, element [base].[Post].[QuestionId] (SqlSimpleColumn) will not be renamed to PostId';


GO
PRINT N'Rename refactoring operation with key a9fafb89-6421-4b17-89d0-a4a7b8d2ebc9 is skipped, element [base].[PostTag].[QuestionId] (SqlSimpleColumn) will not be renamed to PostId';


GO
PRINT N'Rename refactoring operation with key dbb65140-f015-4492-95a4-e7d5a8164743 is skipped, element [base].[PostView].[QuestionId] (SqlSimpleColumn) will not be renamed to PostId';


GO
PRINT N'Rename refactoring operation with key 0707ab24-526d-463c-b93f-39e3c39892e7 is skipped, element [base].[Post].[RoWVersion] (SqlSimpleColumn) will not be renamed to RowVersion';


GO
PRINT N'Creating [AppUser]...';


GO
CREATE LOGIN [AppUser]
    WITH PASSWORD = N'E+|eBOjIe wa>zfleza|uaXImsFT7_&#$!~<vdwgjn,xram9';


GO
PRINT N'Creating [ForumAdmin]...';


GO
CREATE LOGIN [ForumAdmin]
    WITH PASSWORD = N'Reahjh{rxdebhnk|aez%uvpdmsFT7_&#$!~<Bk|dX_r|nsxd';


GO
PRINT N'Creating [Provisioning]...';


GO
CREATE LOGIN [Provisioning]
    WITH PASSWORD = N'td:zwgldymv{fmjun~QatdmcmsFT7_&#$!~<m1|agmtkotxw';


GO
PRINT N'Creating [AppUser]...';


GO
CREATE USER [AppUser] FOR LOGIN [AppUser];


GO
PRINT N'Creating [ForumAdmin]...';


GO
CREATE USER [ForumAdmin] FOR LOGIN [ForumAdmin];


GO
PRINT N'Creating [Provisioning]...';


GO
CREATE USER [Provisioning] FOR LOGIN [Provisioning];


GO
PRINT N'Creating [admin]...';


GO
CREATE SCHEMA [admin]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [base]...';


GO
CREATE SCHEMA [base]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [History]...';


GO
CREATE SCHEMA [History]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [security]...';


GO
CREATE SCHEMA [security]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [user]...';


GO
CREATE SCHEMA [user]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [base].[VoteType]...';


GO
CREATE TABLE [base].[VoteType] (
    [VoteTypeId]       INT            NOT NULL,
    [Name]             NVARCHAR (100) NOT NULL,
    [Description]      NVARCHAR (255) NULL,
    [DefaultVoteValue] INT            NOT NULL,
    CONSTRAINT [PK_VoteType] PRIMARY KEY CLUSTERED ([VoteTypeId] ASC)
);


GO
PRINT N'Creating [base].[VoteType].[UX_VoteType_Name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_VoteType_Name]
    ON [base].[VoteType]([Name] ASC);


GO
PRINT N'Creating [base].[Vote]...';


GO
CREATE TABLE [base].[Vote] (
    [TenantId]    INT              NOT NULL,
    [QuestionId]  INT              NOT NULL,
    [VoteTypeId]  INT              NOT NULL,
    [UserId]      UNIQUEIDENTIFIER NOT NULL,
    [DateCreated] DATETIME         NOT NULL,
    [VoteValue]   INT              NOT NULL,
    CONSTRAINT [PK_Vote] PRIMARY KEY CLUSTERED ([TenantId] ASC, [QuestionId] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [base].[Vote].[FK_Vote_Post]...';


GO
CREATE NONCLUSTERED INDEX [FK_Vote_Post]
    ON [base].[Vote]([QuestionId] ASC, [TenantId] ASC);


GO
PRINT N'Creating [base].[Vote].[FK_Vote_VoteType]...';


GO
CREATE NONCLUSTERED INDEX [FK_Vote_VoteType]
    ON [base].[Vote]([VoteTypeId] ASC);


GO
PRINT N'Creating [base].[Vote].[FK_Vote_TenantUser]...';


GO
CREATE NONCLUSTERED INDEX [FK_Vote_TenantUser]
    ON [base].[Vote]([TenantId] ASC, [UserId] ASC);


GO
PRINT N'Creating [base].[UserBadge]...';


GO
CREATE TABLE [base].[UserBadge] (
    [TenantId]   INT              NOT NULL,
    [BadgeId]    INT              NOT NULL,
    [UserId]     UNIQUEIDENTIFIER NOT NULL,
    [DateEarned] DATETIME         NOT NULL,
    CONSTRAINT [PK_UserBadge] PRIMARY KEY CLUSTERED ([TenantId] ASC, [BadgeId] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [base].[UserBadge].[FK_UserBadge_Badge]...';


GO
CREATE NONCLUSTERED INDEX [FK_UserBadge_Badge]
    ON [base].[UserBadge]([BadgeId] ASC);


GO
PRINT N'Creating [base].[UserBadge].[FK_UserBadge_TenantUser]...';


GO
CREATE NONCLUSTERED INDEX [FK_UserBadge_TenantUser]
    ON [base].[UserBadge]([TenantId] ASC, [UserId] ASC);


GO
PRINT N'Creating [base].[Tag]...';


GO
CREATE TABLE [base].[Tag] (
    [TenantId]    INT            NOT NULL,
    [TagId]       INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (100) NOT NULL,
    [Description] CHAR (255)     NULL,
    CONSTRAINT [PK_Tag] PRIMARY KEY CLUSTERED ([TenantId] ASC, [TagId] ASC)
);


GO
PRINT N'Creating [base].[Tag].[FK_Tag_Tenant]...';


GO
CREATE NONCLUSTERED INDEX [FK_Tag_Tenant]
    ON [base].[Tag]([TenantId] ASC);


GO
PRINT N'Creating [base].[Tag].[UX_base_Tag_TenantName]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_base_Tag_TenantName]
    ON [base].[Tag]([TenantId] ASC, [Name] ASC);


GO
PRINT N'Creating [base].[PostView]...';


GO
CREATE TABLE [base].[PostView] (
    [TenantId] INT              NOT NULL,
    [UserId]   UNIQUEIDENTIFIER NOT NULL,
    [PostId]   INT              NOT NULL,
    [Viewed]   DATETIME         NOT NULL,
    CONSTRAINT [PK_PostView] PRIMARY KEY CLUSTERED ([TenantId] ASC, [UserId] ASC, [PostId] ASC, [Viewed] ASC)
);


GO
PRINT N'Creating [base].[PostView].[FK_PostView_Post]...';


GO
CREATE NONCLUSTERED INDEX [FK_PostView_Post]
    ON [base].[PostView]([TenantId] ASC, [PostId] ASC);


GO
PRINT N'Creating [base].[PostView].[FK_PostView_TenantUser]...';


GO
CREATE NONCLUSTERED INDEX [FK_PostView_TenantUser]
    ON [base].[PostView]([TenantId] ASC, [UserId] ASC);


GO
PRINT N'Creating [base].[PostType]...';


GO
CREATE TABLE [base].[PostType] (
    [PostTypeId] TINYINT       NOT NULL,
    [Name]       NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_PostType] PRIMARY KEY CLUSTERED ([PostTypeId] ASC)
);


GO
PRINT N'Creating [base].[PostType].[UX_base_PostType_Name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_base_PostType_Name]
    ON [base].[PostType]([Name] ASC);


GO
PRINT N'Creating [base].[PostTag]...';


GO
CREATE TABLE [base].[PostTag] (
    [TenantId] INT NOT NULL,
    [PostId]   INT NOT NULL,
    [TagId]    INT NOT NULL,
    CONSTRAINT [PK_PostTag] PRIMARY KEY CLUSTERED ([TenantId] ASC, [PostId] ASC, [TagId] ASC)
);


GO
PRINT N'Creating [base].[PostTag].[FK_base_PostTag_base_Post]...';


GO
CREATE NONCLUSTERED INDEX [FK_base_PostTag_base_Post]
    ON [base].[PostTag]([TenantId] ASC, [PostId] ASC);


GO
PRINT N'Creating [base].[PostTag].[FK_base_PostTag_base_Tag]...';


GO
CREATE NONCLUSTERED INDEX [FK_base_PostTag_base_Tag]
    ON [base].[PostTag]([TagId] ASC, [TenantId] ASC);


GO
PRINT N'Creating [base].[Post]...';


GO
CREATE TABLE [base].[Post] (
    [TenantId]       INT                                         NOT NULL,
    [PostId]         INT                                         IDENTITY (1, 1) NOT NULL,
    [PostTypeId]     TINYINT                                     NOT NULL,
    [ParentPostId]   INT                                         NULL,
    [Title]          NVARCHAR (255)                              NOT NULL,
    [PostText]       NVARCHAR (MAX)                              NOT NULL,
    [PostedBy]       UNIQUEIDENTIFIER                            NOT NULL,
    [AcceptedAnswer] BIT                                         NOT NULL,
    [DateCreated]    DATETIME                                    NOT NULL,
    [Closed]         BIT                                         NOT NULL,
    [ClosedBy]       UNIQUEIDENTIFIER                            NULL,
    [ClosedDate]     DATETIME                                    NULL,
    [LastUpdatedBy]  UNIQUEIDENTIFIER                            NULL,
    [RowGuid]        UNIQUEIDENTIFIER                            ROWGUIDCOL NOT NULL,
    [SysStartTime]   DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]     DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    [RowVersion]     TIMESTAMP                                   NOT NULL,
    CONSTRAINT [PK_Post] PRIMARY KEY CLUSTERED ([TenantId] ASC, [PostId] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
);


GO
PRINT N'Creating [base].[Post].[FK_Post_TenantUser]...';


GO
CREATE NONCLUSTERED INDEX [FK_Post_TenantUser]
    ON [base].[Post]([TenantId] ASC, [PostedBy] ASC);


GO
PRINT N'Creating [base].[Post].[FK_Post_Post]...';


GO
CREATE NONCLUSTERED INDEX [FK_Post_Post]
    ON [base].[Post]([ParentPostId] ASC, [TenantId] ASC);


GO
PRINT N'Creating [base].[Post].[FK_Post_TenantUser8]...';


GO
CREATE NONCLUSTERED INDEX [FK_Post_TenantUser8]
    ON [base].[Post]([TenantId] ASC, [ClosedBy] ASC);


GO
PRINT N'Creating [base].[Post].[FK_Post_PostType]...';


GO
CREATE NONCLUSTERED INDEX [FK_Post_PostType]
    ON [base].[Post]([PostTypeId] ASC);


GO
PRINT N'Creating [base].[Post].[FK_Post_TenantUser15]...';


GO
CREATE NONCLUSTERED INDEX [FK_Post_TenantUser15]
    ON [base].[Post]([TenantId] ASC, [LastUpdatedBy] ASC);


GO
PRINT N'Creating [base].[Badge]...';


GO
CREATE TABLE [base].[Badge] (
    [BadgeId]        INT            IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (100) NOT NULL,
    [Description]    NVARCHAR (MAX) NULL,
    [ImageURL]       NVARCHAR (255) NULL,
    [PointsRequired] INT            NULL,
    CONSTRAINT [PK_base_Badge] PRIMARY KEY CLUSTERED ([BadgeId] ASC)
);


GO
PRINT N'Creating [base].[Badge].[UX_base_Badge_Name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_base_Badge_Name]
    ON [base].[Badge]([Name] ASC);


GO
PRINT N'Creating [base].[user]...';


GO
CREATE TABLE [base].[user] (
    [UserId]       UNIQUEIDENTIFIER                            NOT NULL,
    [Name]         NVARCHAR (200)                              NOT NULL,
    [LastAccessed] DATETIME                                    NULL,
    [DisplayName]  NVARCHAR (200)                              NOT NULL,
    [WorkspaceId]  UNIQUEIDENTIFIER                            NOT NULL,
    [Email]        NVARCHAR (255)                              NULL,
    [Avatar]       NVARCHAR (255)                              NULL,
    [Biography]    NVARCHAR (MAX)                              NULL,
    [IsAdmin]      BIT                                         NOT NULL,
    [RowGuid]      UNIQUEIDENTIFIER                            ROWGUIDCOL NOT NULL,
    [SysStartTime] DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]   DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    [RowVersion]   TIMESTAMP                                   NOT NULL,
    CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED ([UserId] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
);


GO
PRINT N'Creating [base].[TenantUser]...';


GO
CREATE TABLE [base].[TenantUser] (
    [TenantId] INT              NOT NULL,
    [UserId]   UNIQUEIDENTIFIER NOT NULL,
    [IsActive] BIT              NOT NULL,
    CONSTRAINT [PK_TenantUser] PRIMARY KEY CLUSTERED ([TenantId] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [base].[TenantUser].[FK_TenantUser_Tenant]...';


GO
CREATE NONCLUSTERED INDEX [FK_TenantUser_Tenant]
    ON [base].[TenantUser]([TenantId] ASC);


GO
PRINT N'Creating [base].[TenantUser].[FK_TenantUser_User]...';


GO
CREATE NONCLUSTERED INDEX [FK_TenantUser_User]
    ON [base].[TenantUser]([UserId] ASC);


GO
PRINT N'Creating [base].[Tenant]...';


GO
CREATE TABLE [base].[Tenant] (
    [TenantId]       INT                                         IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (50)                               NOT NULL,
    [Description]    NVARCHAR (255)                              NULL,
    [OrganisationId] UNIQUEIDENTIFIER                            NULL,
    [RowGuid]        UNIQUEIDENTIFIER                            ROWGUIDCOL NOT NULL,
    [SysStartTime]   DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]     DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    [RowVersion]     TIMESTAMP                                   NOT NULL,
    [SubscriptionId] UNIQUEIDENTIFIER                            NULL,
    CONSTRAINT [PK_Tenant] PRIMARY KEY CLUSTERED ([TenantId] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
);


GO
PRINT N'Creating [base].[Tenant].[UX_Tenant_Name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Tenant_Name]
    ON [base].[Tenant]([Name] ASC);


GO
PRINT N'Creating unnamed constraint on [base].[VoteType]...';


GO
ALTER TABLE [base].[VoteType]
    ADD DEFAULT ((0)) FOR [DefaultVoteValue];


GO
PRINT N'Creating unnamed constraint on [base].[Vote]...';


GO
ALTER TABLE [base].[Vote]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [base].[Vote]...';


GO
ALTER TABLE [base].[Vote]
    ADD DEFAULT ((0)) FOR [VoteValue];


GO
PRINT N'Creating unnamed constraint on [base].[UserBadge]...';


GO
ALTER TABLE [base].[UserBadge]
    ADD DEFAULT (getdate()) FOR [DateEarned];


GO
PRINT N'Creating [base].[DF_PostView_Viewed]...';


GO
ALTER TABLE [base].[PostView]
    ADD CONSTRAINT [DF_PostView_Viewed] DEFAULT (getdate()) FOR [Viewed];


GO
PRINT N'Creating unnamed constraint on [base].[Post]...';


GO
ALTER TABLE [base].[Post]
    ADD DEFAULT ((0)) FOR [AcceptedAnswer];


GO
PRINT N'Creating unnamed constraint on [base].[Post]...';


GO
ALTER TABLE [base].[Post]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [base].[Post]...';


GO
ALTER TABLE [base].[Post]
    ADD DEFAULT ((0)) FOR [Closed];


GO
PRINT N'Creating [base].[DF_base_Post_RowGuid]...';


GO
ALTER TABLE [base].[Post]
    ADD CONSTRAINT [DF_base_Post_RowGuid] DEFAULT (NEWID()) FOR [RowGuid];


GO
PRINT N'Creating [base].[DF_base_user_isAdmin]...';


GO
ALTER TABLE [base].[user]
    ADD CONSTRAINT [DF_base_user_isAdmin] DEFAULT 0 FOR [IsAdmin];


GO
PRINT N'Creating [base].[DF_base_User_RowGuid]...';


GO
ALTER TABLE [base].[user]
    ADD CONSTRAINT [DF_base_User_RowGuid] DEFAULT (NEWID()) FOR [RowGuid];


GO
PRINT N'Creating [base].[DF_TenantUser_ISActive]...';


GO
ALTER TABLE [base].[TenantUser]
    ADD CONSTRAINT [DF_TenantUser_ISActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [base].[DF_base_Tenant_RowGuid]...';


GO
ALTER TABLE [base].[Tenant]
    ADD CONSTRAINT [DF_base_Tenant_RowGuid] DEFAULT (NEWID()) FOR [RowGuid];


GO
PRINT N'Creating [base].[FK_Vote_Post]...';


GO
ALTER TABLE [base].[Vote] WITH NOCHECK
    ADD CONSTRAINT [FK_Vote_Post] FOREIGN KEY ([TenantId], [QuestionId]) REFERENCES [base].[Post] ([TenantId], [PostId]);


GO
PRINT N'Creating [base].[FK_Vote_TenantUser]...';


GO
ALTER TABLE [base].[Vote] WITH NOCHECK
    ADD CONSTRAINT [FK_Vote_TenantUser] FOREIGN KEY ([TenantId], [UserId]) REFERENCES [base].[TenantUser] ([TenantId], [UserId]);


GO
PRINT N'Creating [base].[FK_Vote_VoteType]...';


GO
ALTER TABLE [base].[Vote] WITH NOCHECK
    ADD CONSTRAINT [FK_Vote_VoteType] FOREIGN KEY ([VoteTypeId]) REFERENCES [base].[VoteType] ([VoteTypeId]);


GO
PRINT N'Creating [base].[FK_UserBadge_Badge]...';


GO
ALTER TABLE [base].[UserBadge] WITH NOCHECK
    ADD CONSTRAINT [FK_UserBadge_Badge] FOREIGN KEY ([BadgeId]) REFERENCES [base].[Badge] ([BadgeId]);


GO
PRINT N'Creating [base].[FK_UserBadge_TenantUser]...';


GO
ALTER TABLE [base].[UserBadge] WITH NOCHECK
    ADD CONSTRAINT [FK_UserBadge_TenantUser] FOREIGN KEY ([TenantId], [UserId]) REFERENCES [base].[TenantUser] ([TenantId], [UserId]);


GO
PRINT N'Creating [base].[FK_Tag_Tenant]...';


GO
ALTER TABLE [base].[Tag] WITH NOCHECK
    ADD CONSTRAINT [FK_Tag_Tenant] FOREIGN KEY ([TenantId]) REFERENCES [base].[Tenant] ([TenantId]);


GO
PRINT N'Creating [base].[FK_PostView_Post]...';


GO
ALTER TABLE [base].[PostView] WITH NOCHECK
    ADD CONSTRAINT [FK_PostView_Post] FOREIGN KEY ([TenantId], [PostId]) REFERENCES [base].[Post] ([TenantId], [PostId]);


GO
PRINT N'Creating [base].[FK_PostView_TenantUser]...';


GO
ALTER TABLE [base].[PostView] WITH NOCHECK
    ADD CONSTRAINT [FK_PostView_TenantUser] FOREIGN KEY ([TenantId], [UserId]) REFERENCES [base].[TenantUser] ([TenantId], [UserId]);


GO
PRINT N'Creating [base].[FK_PostTag_Post]...';


GO
ALTER TABLE [base].[PostTag] WITH NOCHECK
    ADD CONSTRAINT [FK_PostTag_Post] FOREIGN KEY ([TenantId], [PostId]) REFERENCES [base].[Post] ([TenantId], [PostId]);


GO
PRINT N'Creating [base].[FK_PostTag_Tag]...';


GO
ALTER TABLE [base].[PostTag] WITH NOCHECK
    ADD CONSTRAINT [FK_PostTag_Tag] FOREIGN KEY ([TenantId], [TagId]) REFERENCES [base].[Tag] ([TenantId], [TagId]);


GO
PRINT N'Creating [base].[FK_Post_Post]...';


GO
ALTER TABLE [base].[Post] WITH NOCHECK
    ADD CONSTRAINT [FK_Post_Post] FOREIGN KEY ([TenantId], [ParentPostId]) REFERENCES [base].[Post] ([TenantId], [PostId]);


GO
PRINT N'Creating [base].[FK_Post_PostType]...';


GO
ALTER TABLE [base].[Post] WITH NOCHECK
    ADD CONSTRAINT [FK_Post_PostType] FOREIGN KEY ([PostTypeId]) REFERENCES [base].[PostType] ([PostTypeId]);


GO
PRINT N'Creating [base].[FK_Post_TenantUser]...';


GO
ALTER TABLE [base].[Post] WITH NOCHECK
    ADD CONSTRAINT [FK_Post_TenantUser] FOREIGN KEY ([TenantId], [PostedBy]) REFERENCES [base].[TenantUser] ([TenantId], [UserId]);


GO
PRINT N'Creating [base].[FK_Post_TenantUser_LastUpdatedBy]...';


GO
ALTER TABLE [base].[Post] WITH NOCHECK
    ADD CONSTRAINT [FK_Post_TenantUser_LastUpdatedBy] FOREIGN KEY ([TenantId], [LastUpdatedBy]) REFERENCES [base].[TenantUser] ([TenantId], [UserId]);


GO
PRINT N'Creating [base].[FK_Post_TenantUser_ClosedBy]...';


GO
ALTER TABLE [base].[Post] WITH NOCHECK
    ADD CONSTRAINT [FK_Post_TenantUser_ClosedBy] FOREIGN KEY ([TenantId], [ClosedBy]) REFERENCES [base].[TenantUser] ([TenantId], [UserId]);


GO
PRINT N'Creating [base].[FK_TenantUser_Tenant]...';


GO
ALTER TABLE [base].[TenantUser] WITH NOCHECK
    ADD CONSTRAINT [FK_TenantUser_Tenant] FOREIGN KEY ([TenantId]) REFERENCES [base].[Tenant] ([TenantId]);


GO
PRINT N'Creating [base].[FK_TenantUser_User]...';


GO
ALTER TABLE [base].[TenantUser] WITH NOCHECK
    ADD CONSTRAINT [FK_TenantUser_User] FOREIGN KEY ([UserId]) REFERENCES [base].[user] ([UserId]);


GO
PRINT N'Creating [admin].[UserTenantAccess]...';


GO
CREATE VIEW [admin].[UserTenantAccess]
AS
SELECT 
	t.TenantId

FROM 
	base.Tenant AS t
	INNER JOIN base.TenantUser AS tu ON tu.TenantId = t.TenantId
	INNER JOIN base.[user] AS u ON u.UserId = tu.UserId
GO
PRINT N'Creating [admin].[TenantUser]...';


GO
CREATE VIEW [admin].[TenantUser]
WITH SCHEMABINDING
AS
SELECT tu.TenantId, tu.UserId, tu.IsActive FROM base.TenantUser AS tu;
GO
PRINT N'Creating [admin].[User]...';


GO
CREATE VIEW [admin].[User]
WITH SCHEMABINDING
AS
SELECT u.UserId,
       u.Name,
       u.LastAccessed,
       u.DisplayName,
       u.WorkspaceId,
       u.Email,
       u.Avatar,
       u.Biography,
       u.IsAdmin,
       u.RowGuid,
       u.SysStartTime,
       u.SysEndTime,
       u.RowVersion
FROM
       base.[User] AS u;
GO
PRINT N'Creating [admin].[Tenant]...';


GO
CREATE VIEW [admin].[Tenant]
WITH SCHEMABINDING
AS

SELECT t.TenantId,
       t.Name,
       t.Description,
       t.OrganisationId,
       t.RowGuid,
       t.SysStartTime,
       t.SysEndTime,
       t.RowVersion,
       t.SubscriptionId
FROM
       base.Tenant AS t;
GO
PRINT N'Creating [user].[Tag]...';


GO
CREATE VIEW [user].[Tag]
WITH SCHEMABINDING
AS
SELECT t.TenantId, t.TagId, t.Name, t.Description FROM base.Tag AS t;
GO
PRINT N'Creating [user].[PostView]...';


GO
CREATE VIEW [user].[PostView]
WITH SCHEMABINDING
AS
SELECT pv.TenantId,
       pv.UserId,
       pv.PostId,
       pv.Viewed
FROM
       base.PostView AS pv;
GO
PRINT N'Creating [user].[PostType]...';


GO
CREATE VIEW [user].[PostType]
WITH SCHEMABINDING
AS
SELECT pt.PostTypeId, pt.Name FROM base.PostType AS pt;
GO
PRINT N'Creating [user].[PostTag]...';


GO
CREATE VIEW [user].[PostTag]
WITH SCHEMABINDING
AS

SELECT pt.TenantId, pt.PostId, pt.TagId FROM base.PostTag AS pt;
GO
PRINT N'Creating [user].[Post]...';


GO
CREATE VIEW [user].[Post]
WITH SCHEMABINDING
AS
SELECT p.TenantId,
       p.PostId,
       p.PostTypeId,
       p.ParentPostId,
       p.Title,
       p.PostText,
       p.PostedBy,
       p.AcceptedAnswer,
       p.DateCreated,
       p.Closed,
       p.ClosedBy,
       p.ClosedDate,
       p.LastUpdatedBy,
       p.RowGuid,
       p.SysStartTime,
       p.SysEndTime,
       p.RowVersion
FROM
       base.Post AS p;
GO
PRINT N'Creating [user].[Badge]...';


GO
CREATE VIEW [user].[Badge]
WITH SCHEMABINDING
AS
SELECT b.BadgeId,
       b.Name,
       b.Description,
       b.ImageURL,
       b.PointsRequired
FROM
       base.Badge AS b;
GO
PRINT N'Creating [user].[TenantUser]...';


GO
CREATE VIEW [user].[TenantUser]
WITH SCHEMABINDING
AS
SELECT tu.TenantId, tu.UserId, tu.IsActive FROM base.TenantUser AS tu;
GO
PRINT N'Creating [user].[user]...';


GO
CREATE VIEW [user].[user]
WITH SCHEMABINDING
AS
SELECT u.UserId,
       u.Name,
       u.LastAccessed,
       u.DisplayName,
       u.WorkspaceId,
       u.Email,
       u.Avatar,
       u.Biography,
       u.IsAdmin,
       u.RowGuid,
       u.SysStartTime,
       u.SysEndTime,
       u.RowVersion
FROM
       base.[user] AS u;
GO
PRINT N'Creating [user].[VoteType]...';


GO
CREATE VIEW [user].[VoteType]
WITH SCHEMABINDING
AS

SELECT vt.VoteTypeId,
       vt.Name,
       vt.Description,
       vt.DefaultVoteValue
FROM
       base.VoteType AS vt;
GO
PRINT N'Creating [user].[Vote]...';


GO
CREATE VIEW [user].[Vote]
WITH SCHEMABINDING
AS

SELECT v.TenantId,
       v.QuestionId,
       v.VoteTypeId,
       v.UserId,
       v.DateCreated,
       v.VoteValue
FROM
       base.Vote AS v;
GO
PRINT N'Creating [user].[UserBadge]...';


GO
CREATE VIEW [user].[UserBadge]
WITH SCHEMABINDING
AS

SELECT ub.TenantId,
       ub.BadgeId,
       ub.UserId,
       ub.DateEarned
FROM
       base.UserBadge AS ub;
GO
PRINT N'Creating [security].[fn_usersecuritypredicate]...';


GO
CREATE FUNCTION [security].[fn_usersecuritypredicate]
(
	@tenantId int
)
RETURNS TABLE WITH Schemabinding
As

	RETURN SELECT fn_usersecuritypredicate_result FROM
    (
		SELECT 1 AS fn_usersecuritypredicate_result
		FROM
			base.TenantUser tu
		WHERE
			
			CAST(SESSION_CONTEXT(N'UserId') AS UniqueIdentifier) = tu.UserId
			AND tu.TenantId = @tenantId

	) AS U
	WHERE U.fn_usersecuritypredicate_result = 1
GO
PRINT N'Creating [security].[fn_usermaintenancesecuritypredicate]...';


GO
CREATE FUNCTION [security].[fn_usermaintenancesecuritypredicate]
(
	@UserId AS UNIQUEIDENTIFIER
)
RETURNS TABLE WITH Schemabinding
As

	RETURN SELECT 1 AS fn_usermaintenancesecuritypredicate_result 
	WHERE CAST(SESSION_CONTEXT(N'UserId') AS UniqueIdentifier) = @UserId
GO
PRINT N'Creating [security].[fn_adminusermaintenance]...';


GO
CREATE FUNCTION [security].[fn_adminusermaintenance](@UserId AS UNIQUEIDENTIFIER)
RETURNS TABLE
WITH SCHEMABINDING
AS
RETURN SELECT fn_adminusermaintenance_result
       FROM
              (
                     SELECT TOP(1) 1 AS fn_adminusermaintenance_result
                     FROM
                            base.TenantUser AS tu
                            INNER JOIN
                            (SELECT tu2.TenantId 
                            FROM base.[User] AS u 
                                 INNER JOIN base.TenantUser AS tu2 ON tu2.UserId=u.UserId 
                            WHERE u.UserId=CAST(SESSION_CONTEXT(N'UserId') AS UNIQUEIDENTIFIER)AND u.IsAdmin=1) AS CurrentUser ON CurrentUser.TenantId=tu.TenantId
                      WHERE tu.UserID = @UserId
                     ) AS U
      WHERE
                U.fn_adminusermaintenance_result=1
GO
PRINT N'Creating [security].[fn_adminsecuritypredicate]...';


GO

-------------------------------------------------------------------------------------------
/*

	Written By:	Neil Reynolds
	Date:		01/10/2020
	Reason:		Admin Security Predicate
				Takes TenantId, UserId is passed in via Session Context
				Checks IsAdmin flag for user 			
*/
-------------------------------------------------------------------------------------------

CREATE FUNCTION [security].[fn_adminsecuritypredicate]
(
	@tenantId int
)
RETURNS TABLE WITH Schemabinding
As

	RETURN SELECT fn_adminsecuritypredicate_result FROM
    (
		SELECT 1 AS fn_adminsecuritypredicate_result
		FROM
			base.TenantUser tu
			INNER JOIN base.[User] u ON u.Userid = tu.UserId
		WHERE
			
			CAST(SESSION_CONTEXT(N'UserId') AS UniqueIdentifier) = tu.UserId
			AND tu.TenantId = @tenantId
			AND u.Isadmin = 1

	) AS U
	WHERE U.fn_adminsecuritypredicate_result = 1
GO
PRINT N'Creating [base].[UserProjection]...';


GO
CREATE PROCEDURE [base].[UserProjection] @UserId UNIQUEIDENTIFIER
AS
BEGIN
        SELECT p.PostId AS QuestionId,
           p.Title,
           p.AcceptedAnswer,
           p.DateCreated,
           p.SysStartTime AS LastUpdateText,
           ISNULL(v.Votes, 0) Votes,
           ISNULL(a.Answers, 0) Answers,
           ISNULL(pv.[Views], 0) [Views],
		   'c#, sql' AS Tags
    FROM [BASE].Post p
        LEFT JOIN
        (
            SELECT TenantId,
                   QuestionId,
                   SUM(   CASE
                              WHEN VoteTypeId = 1 THEN
                                  1
                              ELSE
                                  -1
                          END
                      ) AS Votes
            FROM BASE.Vote
            GROUP BY TenantId,
                     QuestionId
        ) v
            ON v.TenantId = p.TenantId
               AND v.QuestionId = p.PostId
        LEFT JOIN
        (
            SELECT TenantId,
                   ParentPostId,
                   COUNT(PostId) Answers
            FROM BASE.Post
            WHERE ParentPostId IS NOT NULL
            GROUP BY TenantId,
                     ParentPostId
        ) a
            ON a.TenantId = p.TenantId
               AND a.ParentPostId = p.PostId
        LEFT JOIN
        (
            SELECT TenantId,
                   PostId,
                   COUNT(DISTINCT UserId) AS [Views]
            FROM BASE.PostView
            GROUP BY TenantId,
                     PostId
        ) pv
            ON pv.TenantId = p.TenantId
               AND pv.PostId = p.PostId
        INNER JOIN BASE.TenantUser tu
            ON tu.TenantId = p.TenantId
    WHERE tu.UserId = @UserId
          AND p.PostTypeId = 1;
END;
GO
PRINT N'Creating [base].[QuestionsProjection]...';


GO
CREATE PROCEDURE [base].[QuestionsProjection] @TenantId INT
AS
BEGIN
    SELECT TenantId,
           PostId,
           PostTypeId,
           ParentPostId,
           Title,
           PostText,
           PostedBy,
           AcceptedAnswer,
           DateCreated,
           Closed,
           ClosedBy,
           ClosedDate,
           LastUpdatedBy,
           RowGuid,
           SysStartTime,
           SysEndTime,
           RowVersion
    FROM [base].Post
    WHERE TenantId = @TenantId
		AND PostTypeId = 1
END;
GO
PRINT N'Creating [base].[BackofficeProjection]...';


GO
CREATE PROCEDURE [base].BackofficeProjection
AS
BEGIN
	SELECT * FROM [base].Tenant
	SELECT * FROM [base].TenantUser
	SELECT * FROM [base].[User]
END
GO
PRINT N'Creating [base].[BackofficeGrain]...';


GO
CREATE PROCEDURE [base].BackofficeGrain
AS
BEGIN
	SELECT * FROM [base].Tenant
	SELECT * FROM [base].TenantUser
	SELECT * FROM [base].[User]
END
GO
PRINT N'Creating [base].[QuestionProjection]...';


GO
CREATE PROCEDURE [base].[QuestionProjection] @QuestionId INT
AS
BEGIN
    SELECT q.PostId,
           q.PostTypeId,
           q.ParentPostId,
           q.Title,
           q.PostText,
           q.PostedBy,
           q.AcceptedAnswer,
           q.DateCreated,
           q.Closed,
           q.ClosedBy,
           q.ClosedDate,
           q.LastUpdatedBy,
           q.RowGuid,
           q.SysStartTime,
           q.SysEndTime,
           q.RowVersion,

           a.PostId,
           a.PostTypeId,
           a.ParentPostId,
           a.Title,
           a.PostText,
           a.PostedBy,
           a.AcceptedAnswer,
           a.DateCreated,
           a.Closed,
           a.ClosedBy,
           a.ClosedDate,
           a.LastUpdatedBy,
           a.RowGuid,
           a.SysStartTime,
           a.SysEndTime,
           a.RowVersion,

           v.QuestionId,
           v.VoteTypeId,
           v.UserId,
           v.DateCreated,
           v.VoteValue

    FROM [base].Post q
        LEFT JOIN [base].Post a
            ON a.TenantId = q.TenantId
               AND a.ParentPostId = q.PostId
        LEFT JOIN [base].Vote v
            ON v.TenantId = q.TenantId
               AND v.QuestionId = q.PostId
    WHERE q.PostId = @QuestionId;
END;
GO
PRINT N'Creating [dbo].[BackofficeHttpController]...';


GO
CREATE PROCEDURE dbo.BackofficeHttpController
	@OrganisationId uniqueidentifier
AS
BEGIN
	SELECT * FROM dbo.Tenant WHERE [OrganisationId] = @OrganisationId

	SELECT TU.* FROM dbo.TenantUser TU
	INNER JOIN dbo.Tenant T on TU.TenantId = T.TenantId
	WHERE T.[OrganisationId] = @OrganisationId

	SELECT * FROM dbo.[User] U
	INNER JOIN dbo.TenantUser TU on U.UserId = TU.UserId
	INNER JOIN dbo.Tenant T on TU.TenantId = T.TenantId
	WHERE T.[OrganisationId] = @OrganisationId
END
GO
PRINT N'Creating [security].[UserPolicy]...';


GO
CREATE SECURITY POLICY [security].[UserPolicy]
    ADD FILTER PREDICATE [security].[fn_usersecuritypredicate](TenantId) ON [user].[Post],
    ADD FILTER PREDICATE [security].[fn_usersecuritypredicate](TenantId) ON [user].[PostTag],
    ADD FILTER PREDICATE [security].[fn_usersecuritypredicate](TenantId) ON [user].[PostView],
    ADD FILTER PREDICATE [security].[fn_usersecuritypredicate](TenantId) ON [user].[UserBadge],
    ADD FILTER PREDICATE [security].[fn_usersecuritypredicate](TenantId) ON [user].[Vote],
    ADD FILTER PREDICATE [security].[fn_usermaintenancesecuritypredicate](UserId) ON [user].[user]
    WITH (STATE = ON);


GO
PRINT N'Creating [security].[ForumAdminPolicy]...';


GO
CREATE SECURITY POLICY [security].[ForumAdminPolicy]
    ADD FILTER PREDICATE [security].[fn_adminsecuritypredicate](TenantId) ON [admin].[Tenant],
    ADD FILTER PREDICATE [security].[fn_adminsecuritypredicate](TenantId) ON [admin].[TenantUser],
    ADD FILTER PREDICATE [security].[fn_adminusermaintenance](UserId) ON [admin].[User]
    WITH (STATE = ON);


GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [AppUser];


GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [ForumAdmin];


GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [Provisioning];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[admin].[TenantUser] TO [Provisioning]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[admin].[TenantUser] TO [Provisioning]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[admin].[TenantUser] TO [Provisioning]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[admin].[TenantUser] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[admin].[TenantUser] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[admin].[TenantUser] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[admin].[User] TO [Provisioning]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[admin].[User] TO [Provisioning]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[admin].[User] TO [Provisioning]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[admin].[User] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[admin].[User] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[admin].[User] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[admin].[User] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[admin].[Tenant] TO [Provisioning]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[admin].[Tenant] TO [Provisioning]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[admin].[Tenant] TO [Provisioning]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[admin].[Tenant] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[admin].[Tenant] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[admin].[Tenant] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[admin].[Tenant] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[Tag] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[Tag] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[Tag] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[Tag] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[Tag] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[PostView] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[PostView] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[PostView] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[PostView] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[PostView] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[PostView] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[PostView] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[PostView] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[PostType] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[PostType] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[PostType] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[PostType] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[PostType] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[PostTag] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[PostTag] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[PostTag] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[PostTag] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[PostTag] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[PostTag] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[PostTag] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[PostTag] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[Post] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[Post] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[Post] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[Post] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[Post] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[Post] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[Post] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[Post] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[Badge] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[Badge] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[Badge] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[Badge] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[Badge] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[TenantUser] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[TenantUser] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[TenantUser] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[TenantUser] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[TenantUser] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[user] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[user] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[user] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[user] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[user] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[user] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[VoteType] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[VoteType] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[VoteType] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[VoteType] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[VoteType] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[Vote] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[Vote] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[Vote] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[Vote] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[Vote] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[Vote] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[Vote] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[Vote] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[UserBadge] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[UserBadge] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[UserBadge] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[UserBadge] TO [ForumAdmin]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[user].[UserBadge] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[user].[UserBadge] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[user].[UserBadge] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[user].[UserBadge] TO [AppUser]
    AS [dbo];


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2776d1af-5766-4d65-9413-0de191ac44f5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2776d1af-5766-4d65-9413-0de191ac44f5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1996913e-0ec4-4559-822a-397725e0e205')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1996913e-0ec4-4559-822a-397725e0e205')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a9fafb89-6421-4b17-89d0-a4a7b8d2ebc9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a9fafb89-6421-4b17-89d0-a4a7b8d2ebc9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dbb65140-f015-4492-95a4-e7d5a8164743')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dbb65140-f015-4492-95a4-e7d5a8164743')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0707ab24-526d-463c-b93f-39e3c39892e7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0707ab24-526d-463c-b93f-39e3c39892e7')

GO

GO
MERGE INTO [User].[PostType] AS Target
USING (VALUES
    (1, 'Question'),
    (2, 'Answer'),
    (3, 'Comment')
)
AS Source ([PostTypeId], [Name])
ON Target.[PostTypeId] = Source.[PostTypeId]
WHEN MATCHED THEN
UPDATE SET
    [Name] = Source.[Name]
WHEN NOT MATCHED BY TARGET THEN
INSERT ([PostTypeId], [Name])
VALUES ([PostTypeId], [Name]);

IF NOT EXISTS ( SELECT * FROM [User].VoteType WHERE VoteTypeId = 1 )
    INSERT INTO [User].VoteType(VoteTypeId, Name, Description, DefaultVoteValue)
    VALUES (1, 'VoteUp', 'Vote the answer up', 20)
GO

IF NOT EXISTS ( SELECT * FROM [User].VoteType WHERE VoteTypeId = 2 )
    INSERT INTO [User].VoteType(VoteTypeId, Name, Description, DefaultVoteValue)
    VALUES (2, 'VoteDown', 'Vote the answer down', -20)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [base].[Vote] WITH CHECK CHECK CONSTRAINT [FK_Vote_Post];

ALTER TABLE [base].[Vote] WITH CHECK CHECK CONSTRAINT [FK_Vote_TenantUser];

ALTER TABLE [base].[Vote] WITH CHECK CHECK CONSTRAINT [FK_Vote_VoteType];

ALTER TABLE [base].[UserBadge] WITH CHECK CHECK CONSTRAINT [FK_UserBadge_Badge];

ALTER TABLE [base].[UserBadge] WITH CHECK CHECK CONSTRAINT [FK_UserBadge_TenantUser];

ALTER TABLE [base].[Tag] WITH CHECK CHECK CONSTRAINT [FK_Tag_Tenant];

ALTER TABLE [base].[PostView] WITH CHECK CHECK CONSTRAINT [FK_PostView_Post];

ALTER TABLE [base].[PostView] WITH CHECK CHECK CONSTRAINT [FK_PostView_TenantUser];

ALTER TABLE [base].[PostTag] WITH CHECK CHECK CONSTRAINT [FK_PostTag_Post];

ALTER TABLE [base].[PostTag] WITH CHECK CHECK CONSTRAINT [FK_PostTag_Tag];

ALTER TABLE [base].[Post] WITH CHECK CHECK CONSTRAINT [FK_Post_Post];

ALTER TABLE [base].[Post] WITH CHECK CHECK CONSTRAINT [FK_Post_PostType];

ALTER TABLE [base].[Post] WITH CHECK CHECK CONSTRAINT [FK_Post_TenantUser];

ALTER TABLE [base].[Post] WITH CHECK CHECK CONSTRAINT [FK_Post_TenantUser_LastUpdatedBy];

ALTER TABLE [base].[Post] WITH CHECK CHECK CONSTRAINT [FK_Post_TenantUser_ClosedBy];

ALTER TABLE [base].[TenantUser] WITH CHECK CHECK CONSTRAINT [FK_TenantUser_Tenant];

ALTER TABLE [base].[TenantUser] WITH CHECK CHECK CONSTRAINT [FK_TenantUser_User];


GO
PRINT N'Update complete.';


GO
