// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using Access.Primitives.Extensions.Cloning;
using Access.Primitives.IO;
using CSharp.Choices;
using LanguageExt;
using StackUnderflow.EF.Models;

namespace StackUnderflow.Domain.Schema.Backoffice.CreateTenantOp
{
    public static partial class CreateTenantResult
    {
        public static ICreateTenantResult Match(this ICreateTenantResult self, System.Func<TenantCreated, ICreateTenantResult> whenTenantCreated, System.Func<TenantNotCreated, ICreateTenantResult> whenTenantNotCreated, System.Func<InvalidRequest, ICreateTenantResult> whenInvalidRequest)
        {
            switch ((self))
            {
                case TenantCreated tenantcreated:
                    return whenTenantCreated(tenantcreated);
                case TenantNotCreated tenantnotcreated:
                    return whenTenantNotCreated(tenantnotcreated);
                case InvalidRequest invalidrequest:
                    return whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<ICreateTenantResult> MatchAsync(this ICreateTenantResult self, System.Func<TenantCreated, System.Threading.Tasks.Task<ICreateTenantResult>> whenTenantCreated, System.Func<TenantNotCreated, System.Threading.Tasks.Task<ICreateTenantResult>> whenTenantNotCreated, System.Func<InvalidRequest, System.Threading.Tasks.Task<ICreateTenantResult>> whenInvalidRequest)
        {
            switch ((self))
            {
                case TenantCreated tenantcreated:
                    return await whenTenantCreated(tenantcreated);
                case TenantNotCreated tenantnotcreated:
                    return await whenTenantNotCreated(tenantnotcreated);
                case InvalidRequest invalidrequest:
                    return await whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this ICreateTenantResult self, System.Func<TenantCreated, R> whenTenantCreated, System.Func<TenantNotCreated, R> whenTenantNotCreated, System.Func<InvalidRequest, R> whenInvalidRequest)
        {
            switch ((self))
            {
                case TenantCreated tenantcreated:
                    return whenTenantCreated(tenantcreated);
                case TenantNotCreated tenantnotcreated:
                    return whenTenantNotCreated(tenantnotcreated);
                case InvalidRequest invalidrequest:
                    return whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this ICreateTenantResult self, System.Func<TenantCreated, System.Threading.Tasks.Task<R>> whenTenantCreated, System.Func<TenantNotCreated, System.Threading.Tasks.Task<R>> whenTenantNotCreated, System.Func<InvalidRequest, System.Threading.Tasks.Task<R>> whenInvalidRequest)
        {
            switch ((self))
            {
                case TenantCreated tenantcreated:
                    return await whenTenantCreated(tenantcreated);
                case TenantNotCreated tenantnotcreated:
                    return await whenTenantNotCreated(tenantnotcreated);
                case InvalidRequest invalidrequest:
                    return await whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}