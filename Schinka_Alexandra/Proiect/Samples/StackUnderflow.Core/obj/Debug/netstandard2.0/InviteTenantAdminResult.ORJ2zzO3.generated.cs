// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Access.Primitives.Extensions.Cloning;
using CSharp.Choices;
using StackUnderflow.EF.Models;

namespace StackUnderflow.Domain.Schema.Backoffice.InviteTenantAdminOp
{
    public static partial class InviteTenantAdminResult
    {
        public static IInviteTenantAdminResult Match(this IInviteTenantAdminResult self, System.Func<TenantAdminInvited, IInviteTenantAdminResult> whenTenantAdminInvited, System.Func<TenantAdminNotInvited, IInviteTenantAdminResult> whenTenantAdminNotInvited, System.Func<InvalidRequest, IInviteTenantAdminResult> whenInvalidRequest)
        {
            switch ((self))
            {
                case TenantAdminInvited tenantadmininvited:
                    return whenTenantAdminInvited(tenantadmininvited);
                case TenantAdminNotInvited tenantadminnotinvited:
                    return whenTenantAdminNotInvited(tenantadminnotinvited);
                case InvalidRequest invalidrequest:
                    return whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<IInviteTenantAdminResult> MatchAsync(this IInviteTenantAdminResult self, System.Func<TenantAdminInvited, System.Threading.Tasks.Task<IInviteTenantAdminResult>> whenTenantAdminInvited, System.Func<TenantAdminNotInvited, System.Threading.Tasks.Task<IInviteTenantAdminResult>> whenTenantAdminNotInvited, System.Func<InvalidRequest, System.Threading.Tasks.Task<IInviteTenantAdminResult>> whenInvalidRequest)
        {
            switch ((self))
            {
                case TenantAdminInvited tenantadmininvited:
                    return await whenTenantAdminInvited(tenantadmininvited);
                case TenantAdminNotInvited tenantadminnotinvited:
                    return await whenTenantAdminNotInvited(tenantadminnotinvited);
                case InvalidRequest invalidrequest:
                    return await whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this IInviteTenantAdminResult self, System.Func<TenantAdminInvited, R> whenTenantAdminInvited, System.Func<TenantAdminNotInvited, R> whenTenantAdminNotInvited, System.Func<InvalidRequest, R> whenInvalidRequest)
        {
            switch ((self))
            {
                case TenantAdminInvited tenantadmininvited:
                    return whenTenantAdminInvited(tenantadmininvited);
                case TenantAdminNotInvited tenantadminnotinvited:
                    return whenTenantAdminNotInvited(tenantadminnotinvited);
                case InvalidRequest invalidrequest:
                    return whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this IInviteTenantAdminResult self, System.Func<TenantAdminInvited, System.Threading.Tasks.Task<R>> whenTenantAdminInvited, System.Func<TenantAdminNotInvited, System.Threading.Tasks.Task<R>> whenTenantAdminNotInvited, System.Func<InvalidRequest, System.Threading.Tasks.Task<R>> whenInvalidRequest)
        {
            switch ((self))
            {
                case TenantAdminInvited tenantadmininvited:
                    return await whenTenantAdminInvited(tenantadmininvited);
                case TenantAdminNotInvited tenantadminnotinvited:
                    return await whenTenantAdminNotInvited(tenantadminnotinvited);
                case InvalidRequest invalidrequest:
                    return await whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}