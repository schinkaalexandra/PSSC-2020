// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using CSharp.Choices;
using System;
using System.Collections.Generic;
using System.Text;
using Access.Primitives.IO;

namespace StackUnderflow.Domain.Core.Contexts.Question.LanguageCheck
{
    public static partial class LanguageCheckResult
    {
        public static ILanguageCheckResult Match(this ILanguageCheckResult self, System.Func<TextChecked, ILanguageCheckResult> whenTextChecked, System.Func<TextNotChecked, ILanguageCheckResult> whenTextNotChecked, System.Func<ManualReviewRequired, ILanguageCheckResult> whenManualReviewRequired)
        {
            switch ((self))
            {
                case TextChecked textchecked:
                    return whenTextChecked(textchecked);
                case TextNotChecked textnotchecked:
                    return whenTextNotChecked(textnotchecked);
                case ManualReviewRequired manualreviewrequired:
                    return whenManualReviewRequired(manualreviewrequired);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<ILanguageCheckResult> MatchAsync(this ILanguageCheckResult self, System.Func<TextChecked, System.Threading.Tasks.Task<ILanguageCheckResult>> whenTextChecked, System.Func<TextNotChecked, System.Threading.Tasks.Task<ILanguageCheckResult>> whenTextNotChecked, System.Func<ManualReviewRequired, System.Threading.Tasks.Task<ILanguageCheckResult>> whenManualReviewRequired)
        {
            switch ((self))
            {
                case TextChecked textchecked:
                    return await whenTextChecked(textchecked);
                case TextNotChecked textnotchecked:
                    return await whenTextNotChecked(textnotchecked);
                case ManualReviewRequired manualreviewrequired:
                    return await whenManualReviewRequired(manualreviewrequired);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this ILanguageCheckResult self, System.Func<TextChecked, R> whenTextChecked, System.Func<TextNotChecked, R> whenTextNotChecked, System.Func<ManualReviewRequired, R> whenManualReviewRequired)
        {
            switch ((self))
            {
                case TextChecked textchecked:
                    return whenTextChecked(textchecked);
                case TextNotChecked textnotchecked:
                    return whenTextNotChecked(textnotchecked);
                case ManualReviewRequired manualreviewrequired:
                    return whenManualReviewRequired(manualreviewrequired);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this ILanguageCheckResult self, System.Func<TextChecked, System.Threading.Tasks.Task<R>> whenTextChecked, System.Func<TextNotChecked, System.Threading.Tasks.Task<R>> whenTextNotChecked, System.Func<ManualReviewRequired, System.Threading.Tasks.Task<R>> whenManualReviewRequired)
        {
            switch ((self))
            {
                case TextChecked textchecked:
                    return await whenTextChecked(textchecked);
                case TextNotChecked textnotchecked:
                    return await whenTextNotChecked(textnotchecked);
                case ManualReviewRequired manualreviewrequired:
                    return await whenManualReviewRequired(manualreviewrequired);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}