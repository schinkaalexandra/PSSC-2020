// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using CSharp.Choices;
using System;
using System.Collections.Generic;
using System.Text;

namespace StackUnderflow.Domain.Core.Contexts.Question.SendAckToQuestionOwner
{
    public static partial class SendAckToQuestionOwnerResult
    {
        public static ISendAckToQuestionOwnerResult Match(this ISendAckToQuestionOwnerResult self, System.Func<AckSent, ISendAckToQuestionOwnerResult> whenAckSent, System.Func<AckNotSent, ISendAckToQuestionOwnerResult> whenAckNotSent)
        {
            switch ((self))
            {
                case AckSent acksent:
                    return whenAckSent(acksent);
                case AckNotSent acknotsent:
                    return whenAckNotSent(acknotsent);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<ISendAckToQuestionOwnerResult> MatchAsync(this ISendAckToQuestionOwnerResult self, System.Func<AckSent, System.Threading.Tasks.Task<ISendAckToQuestionOwnerResult>> whenAckSent, System.Func<AckNotSent, System.Threading.Tasks.Task<ISendAckToQuestionOwnerResult>> whenAckNotSent)
        {
            switch ((self))
            {
                case AckSent acksent:
                    return await whenAckSent(acksent);
                case AckNotSent acknotsent:
                    return await whenAckNotSent(acknotsent);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this ISendAckToQuestionOwnerResult self, System.Func<AckSent, R> whenAckSent, System.Func<AckNotSent, R> whenAckNotSent)
        {
            switch ((self))
            {
                case AckSent acksent:
                    return whenAckSent(acksent);
                case AckNotSent acknotsent:
                    return whenAckNotSent(acknotsent);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this ISendAckToQuestionOwnerResult self, System.Func<AckSent, System.Threading.Tasks.Task<R>> whenAckSent, System.Func<AckNotSent, System.Threading.Tasks.Task<R>> whenAckNotSent)
        {
            switch ((self))
            {
                case AckSent acksent:
                    return await whenAckSent(acksent);
                case AckNotSent acknotsent:
                    return await whenAckNotSent(acknotsent);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}